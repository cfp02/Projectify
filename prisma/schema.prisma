// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(cuid())
  title       String
  subtitle    String?
  description String?   @db.Text
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastAccessed DateTime @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  sections    Section[]
  resources   Resource[]
  tags        Tag[]
  activities  Activity[]
  versions    ProjectVersion[]
  readme      Readme?
  githubRepo  GithubRepo?

  @@index([userId])
}

model Section {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  order     Int
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id        String   @id @default(cuid())
  type      String   // 'link', 'file', 'image'
  title     String
  url       String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  type      String   // 'note', 'voice_note', 'update', etc.
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ProjectVersion {
  id          String   @id @default(cuid())
  version     Int
  title       String
  subtitle    String?
  description String?  @db.Text
  status      String
  snapshot    Json     // Stores the complete project state including sections, resources, etc.
  createdAt   DateTime @default(now())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String   // Store who created this version
  reason      String?  @db.Text // Optional reason for the version (e.g., "Added new feature", "Updated documentation")

  @@unique([projectId, version]) // Ensure version numbers are unique per project
}

model Readme {
  id          String          @id @default(cuid())
  content     String          @db.Text
  projectId   String          @unique // One-to-one with Project
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  versions    ReadmeVersion[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isTemplate  Boolean         @default(false) // Whether this README is used as a template

  @@index([projectId])
}

model ReadmeVersion {
  id        String   @id @default(cuid())
  version   Int
  content   String   @db.Text
  message   String?  @db.Text // Commit message for the version
  readmeId  String
  readme    Readme   @relation(fields: [readmeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([readmeId])
  @@index([version])
}

model GithubRepo {
  id            String   @id @default(cuid())
  repoUrl       String
  repoName      String
  ownerName     String
  projectId     String   @unique // One-to-one with Project
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lastSynced    DateTime @default(now())
  syncEnabled   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
} 